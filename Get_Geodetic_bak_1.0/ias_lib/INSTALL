IAS LIbrary Install Instructions:

These instructions assume your prompt is starting in the top-level ias_lib 
directory and you are using a variant of the C-shell (csh or tcsh).


1) Set up your .cshrc file with some convenient settings:

    setenv DEVDIR /$HOST/development/$USER

   See the note at the end of the file about CFLAGS.


2) Set up the build environment.

    source setup/iaslib_setup --enable-dev
 
   The --enable-dev option enables the environment variables to be set up to
   build the library.  The default is to not set up those environment variables
   since they should not be needed in the production environment.

   By default, the build directory is set to
        /$HOST/development/$USER/build_ias
   The build directory can be customized by passing in another argument to the
   setup script to define the directory.  For example:

    source setup/iaslib_setup --enable-dev /$HOST/development/$USER/test_build

   will create the build in a different directory.  This is useful if you are
   working on different versions of the code at the same time.

   The script also takes an optional --enable-db-tests or --disable-db-tests
   which enables or disables the database regression tests.  By default, the
   --enable-db-tests is used.  The --disable-db-tests should be used if the
   user doesn't have a set of database tables set up.


3) Set up the database environment.

    source setup/setup_db

   This step is optional if you disable the database tests and don't intend to
   use the database in other parts of the build.


4) Setup the automake/autoconf environment.

    ./autogen.sh


5) Run the configure script to build the Makefiles.

    ./configure

   The default location to install the library is defined by $IASLIB_BASE which
   is set up by step 1, or by the particular subsystem environment setup
   script.  It can be overridden with the --prefix option.


6) Build the software.

    ./build

   The build script first does a "make headers" to install the public header
   files, then does a "make install" to build the library and install it.
   The "make headers" is a necessary step, but you can manually do that
   followed by make and "make install" if you want.

7) Run the regression tests.

    make tests

   This recursively runs all the regression tests until an error is
   encountered.  Details on the error can be found in the check.log file.

------------------------------------------------------------------------------
Notes:
------------------------------------------------------------------------------
- The CFLAGS are set by the iaslib_setup script to the defaults that should be
  used to compile the IAS code.  Those settings are:

  setenv CFLAGS '-g -Wall -O2 -march=nocona -mfpmath=sse -msse2'

  The reason for these flags are as follows:
    -g
        This includes debugging information in the built code for gdb.

    -Wall
        Report all warnings

    -O2
        Use optimization level 2.  This performs all the "safe" optimizations
        and can result in significant speedups compared to the default level
        of optimization.  The drawback is that it sometimes reorders the code
        and optimizes out temporary variables which make it hard to follow the
        code.  You may need to remove this flag at times if you use gdb a lot.

    -march=nocona
        Tells the compiler what processor to target.  It is the current
        processor installed in our servers.  Without that flag, gcc defaults to
        an older processor family that doesn't have some faster instructions.

    -m32 (not currently used by default)
        Tells the compiler to build 32-bit code on our 64-bit servers.  That is
        currently necessary to avoid using the Oracle ODBC 64-bit libraries
        which have bugs.

    -mfpmath=sse -msse2
        The combination of these two flags tell gcc to use SSE instructions
        for the floating point math.  The reason for this is a bit complicated.
        IEEE floating point defines doubles as 64-bit values, but allows some
        leeway for keeping more precision than that.  Intel processors floating
        point processor design keeps 80 bits of precision internally for
        doubles, only converting them to 64-bit when they need to be stored to
        memory.
        
        In theory, keeping as much precision as possible seems like a good
        thing.  However, in practice it does not work well since the order of
        floating point operations generated by the compiler ends up being
        changed around based on the compiler options used.  For example,
        compiling code with and without the -O2 flag often results in floating
        point calculations returning different results because the order of
        operations changed with/without -O2 and the stores to memory happen
        at different times.  
        
        Another example is that the Oracle database has a "feature" where it
        messes with the processor floating point unit control register to turn
        off the 80-bit precision, instead forcing it to all be 64-bit precision
        for ALL floating point operations - including operations that are
        supposed to be 32-bit.  So it just forces the problem to a different
        area.  Also, since that is a run-time operation, it only happens when
        a database connection is made.  Different results are obtained for
        floating point operations depending on whether a database connection
        is made.  That is really bad.  That feature can be disabled by setting
        the environment variable ORA_FPU_PRECISION=EXTENDED.  However, getting
        consistent results at run-time being dependent on an environment
        variable setting is not good.

        Unfortunately, there isn't a compiler option available to force the
        normal Intel floating point unit to always eliminate the extra internal
        precision.  The work-around for that issue is to use the -mfpmath=sse
        and -msse2 options.  That tells gcc to use the SSE instruction set to
        perform floating point math operations.  Those instructions are limited
        to 64-bits of precision and avoid the problem entirely.

        The end result is that with these flags, whether or not an Oracle
        database connection is made or the -O2 flag is used for compiling,
        the results obtained with floating point math are much more consistent.
        There doesn't appear to be any significant difference in speed when
        using these options.
        

- The software has support for multi-threading.  It is sometimes difficult to
  debug multi-threaded software, so there is a configure option to disable the
  multi-threaded build.  To configure the software without multi-threading, run
  configure like this: ./configure --disable-multithread

- The autogen.sh and configure scripts will need to be re-run whenever a change
  is made to any Makefile.am file or the configure.in script.  Note that 
  will include whenever you do a "svn up" that updates those files.

- The autogen.sh and configure scripts need to be re-run whenever a build
  related environment variable is changed.  For example, if the CFLAGS
  environment variable is changed, it will not be used until things are
  reconfigured.

- The build of the libraries is done in two passes.  The first pass installs
  the public header files in a common location and the second pass actually
  builds the libraries.  That allows the public header files to be located in
  the same directory as the .c files instead of collecting them all in some
  common directory far removed from the actual implementation.  This makes it
  easier to maintain the code.

- To make it easy to set up the environment, it is a good idea to set up an
  alias in your .cshrc file something like:

    alias iasenv 'source $DEVDIR/oli_ias/ias_lib/setup/setup_db; \
        source $DEVDIR/oli_ias/ias_lib/setup/iaslib_setup --enable-dev --disable-db-tests; \
        source $DEVDIR/oli_ias/ias_base/setup/iasbase_setup;'

  Note the last line assumes you want the ias_base build setup as well.  The
  --disable-db-tests can be left off if you have the database setup properly
  and want to run the regression tests that use the database.

  To set up the environment, just type 'iasenv' at the command prompt.  If
  needed, additional aliases can be created in the .cshrc file if you have
  multiple builds you are working with.

- It is often a good idea to do a "make clean" and "make uninstall" after
  library routine names are changed to make sure old versions of the function
  do not remain in the built libraries.

